Question 1: What are components in React? Explain the difference between functional components and class components

In React, components are the building blocks of a user interface, allowing developers to break down a UI into reusable and independent pieces. Components can be categorized into functional components and class components. Functional components are simple JavaScript functions that return JSX and are primarily used for presentational purposes. They utilize React hooks like useState and useEffect to manage state and lifecycle methods. For example, a functional component looks like this:

const Greeting = () => <h1>Hello, React!</h1>;

On the other hand, class components are ES6 classes that extend React.Component, requiring a render() method to return JSX. They manage state using this.state and lifecycle methods such as componentDidMount(). A class component example is:

class Greeting extends React.Component {
  render() {
    return <h1>Hello, React!</h1>;
  }
}

The key differences are that functional components are lighter, easier to read, and optimized for performance, while class components were traditionally used for complex logic but are now less preferred due to the introduction of hooks. React encourages using functional components for modern development as they lead to simpler, more maintainable, and efficient code.

**********************************************************************

 Question 2: How do you pass data to a component using props?
In React, props (short for properties) are used to pass data from a parent component to a child component, making components reusable and dynamic. Props are immutable, meaning they cannot be modified inside the child component. Data is passed to a component as attributes in JSX, similar to HTML attributes. For example, if a Greeting component needs a name prop, it can be used like this:

<Greeting name="Rishabh" />

Inside the Greeting component, the prop can be accessed using the props object in functional components or this.props in class components. In a functional component, it looks like:

const Greeting = (props) => <h1>Hello, {props.name}!</h1>;

Using destructuring, it can be simplified as:

const Greeting = ({ name }) => <h1>Hello, {name}!</h1>;

Props allow passing various types of data, including strings, numbers, arrays, objects, and even functions. They enable dynamic rendering and communication between components, making React applications more modular and scalable. Since props are read-only, if data needs to be modified, it should be handled via state in the parent component and passed down again as props. This unidirectional data flow ensures predictable behavior and better maintainability in React applications.

*********************************************************************
Question 3: What is the role of render() in class components?

In React class components, the render() method is essential as it defines what should be displayed on the screen. It is a required method in any class component that extends React.Component and must return JSX, which React then converts into actual DOM elements. The render() method is automatically called whenever the component needs to update, such as when its state or props change. Inside render(), developers can use JavaScript expressions, conditionals, and props to dynamically generate UI elements. For example, a class component using render() looks like this:

class Greeting extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}

It is important to note that render() should remain pure, meaning it should not modify component state or perform side effects like API calls, as that could lead to unpredictable behavior. Instead, state updates should be handled in lifecycle methods like componentDidMount(). React re-invokes render() whenever state or props change, ensuring that the UI stays in sync with the latest data. Overall, render() plays a crucial role in React class components by determining the component’s visual output and ensuring a dynamic and responsive UI.